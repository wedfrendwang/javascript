
	所有内容进行整理进行复习，关键点
	
	javascript 
	
	Unit 1:引入js文件
	
			如何引入js的文件
			1：外链js:  "<script src="../" type="text/javascript" charset="utf-8"></script>"
			      通过src进行外部的js的引用，使用的时候跟正常的方法类似，学习java的人可以将其理解为类
			  
			2：行间js：在书写html的中间插入script进行相应的逻辑操作
			
			3：写在head中，和写入行间js的方式一致
			
			其实在HTML中，js可以写在任何地方，但是因为有时候的逻辑操作，解释执行一般情况下由上而下执行，在实际操作中，js一般写在head头部，或者在body后面
	
	
		2：变量的声明方式
		
			js的变量声明方式：统一使用var，可以声明任意类型，其实有点类似于java中的Object
			
			声明方式使用var 但是对于不同的数据类型，js提供一下几种
			
			Undefined  声明变量，但是没有进行赋值  Null
			
			String     var str = "";
			
			Number 		var number = 55;
			
			boolean		var isNumber = true;
			
			NaN         它是一个number类型，但是如果有时候将String转化为number的时候不可以便会返回这种类型    typeof
			
			Array
			
			Math
			
			Date  那么data，Math，Array中有很多的方法，不知道时可以直接查看网上资料就好了
			
			不知道返回什么样的类型就用方法      typeof  去验证就好了
			
		
		3：全局变量和局部变量
		
			什么是全局变量呢？
			
			在这个document范围中均可以使用的变量，函数之外的称为全局变量   var
			
			什么是局部变量呢
			
			只在自身的方法中可以使用的变量，函数之内的称为全局变量   var
			
			这两点同java类似。说说差异的地方
			
			全局变量的另外一种方式，使用  window对象，类似如   window.name = "wedfrend";
			此时 name为全局变量
			
			另外一种情况下：在函数内部 不使用 var声明一个变量，但是在函数中该变量被赋值，当函数执行后，该变量便会为全局变量
			如：function getName(){
				name = "wedfrend";
			}
			
		4：探索变量类型
		
			变量类型：使用typeof在实际的开发中可以实践测试
		
		
		5：算数运算符   逻辑运算符if  switch     关系运算符	循环语句  for while 
		
			说说基本的运算符的使用
			学习过java，了解过C+，目前的js
			现在看来，似乎所有的编程语言万法同宗，对于算数运算，逻辑控制，循环语法绝大多数大同小异
			
			这里整理几个特别的
			
			a++;
			
			++a;
			
			a+=a;
			
			&&    学名叫做短路与
			
			&     学名    逻辑与
			
			== 等值符
			
			=== 等同符
			      
			 *
			 * 在js中含有一个   系统默认函数 Number
			 * 数据类型比较像number靠拢
			 * NaN自己都不等于自己的
			 * 
			 
			for循环中的两个关键词
					continue:跳出本次循环
			* 		break:结束本次循环
			
			类似于java中foreach语法，js中也有一个
			
			for(var a in str){
			}
			
			不同的是 a 只是这个str的索引值，并不是java中的返回对象，所以还是进行区分，简单讲这个就是for循环的缩写，不像java那样对初学者难以理解
			
			 
			 
		
		6:函数声明
				 * 
				 *	function 的创建方式
				 * 
				 * 	
				 *	1：函数也是对象   var Fun1 = new Function();   //这一块在后面
				 * 
				 *  2：声明式
				 * 			function getDate(){}
				 * 
				 *  3：匿名式   基本用在回掉的时候  
				 *
				 *		javaScript语言精粹
				 
				 
				 	js有个特点，在传入参数时不需要声明类型，对数量没要求，也就是 同一个函数，对于参数的传递，你随便
				 	
				 	还有在函数中进行数据返回的时候，不像java中那样一定要声明返回类型，直接使用return value 便可以
				 	
				 	所以这就有问题的是，没法像java那样进行函数重构
				 	
				 	但是js的重构使用另外的方式  设置一个外部函数，传入参数，根据传入参数来进行判断，视情况而定进行使用
				 * 
				 * 
				 * 
				 * 
				 * 
			
		
		7：数组声明方式 以及常见方法
		
				数组Array
				
				声明方式有很多：  var number = new Array();
				
							var number1 = new Array(50);
				
							var number2 = new Array('wang','xiao','bo');
							
							简单的声明
							
							var array = [];
							
				关键是在数组中的方法：
				
							push  unshift   pop    shift     slice  concat  reverse  sort
							
							
		
		
		8：函数的重载
		
			js的弱语言特性，对于代码的编写真心不错，对于参数的要求很任性，对写惯了java语法，还是挺佩服的，也许js在底层做了更多的工作
			大大减少了开发者的顾虑
			
			当然有利有弊，在进行重构的时候并不能像java那样进行使用
			
				 * 如何实现函数的重载
				 * 
				 * js弱语言
				 * 
				 * 参数的类型，参数的个数
				 * 
				 * 所以按照java的那一套是不行的，所以，需要怎么办，达到重载的效果呢？
				 * 
				 * 根据实际情况书写自己的判断，结合arguments.length属性
				 
				  解释arguments是什么：当前函数的一个内置属性
				 
				 function test(a,b,c){
					alert("我的形参为["+test.length+"],而我传入的实际参数为["+test.arguments.length+"]");
				 }		
				 
				 * 
				 *	之所以能够使用这种方法：我个人的理解源于js规范中不要求形参实参一一对应
				  function sayHello(){
					
					var args = arguments.length;
					console.log(args);
					
					if(args == 1){
						
						if(typeof arguments[0]=="string" ){
							console.log('加载含有一个参数并且参数类型是string的方法');
						}else if(typeof arguments[0]=="number"){
							console.log('加载含有一个参数并且参数类型是number的方法');
						}
					}else if(args == 2){
						console.log('加载含有两个参数的方法');
						
						alert(arguments[0]+''+arguments[1]);
					}else{
						console.log('暂无处理方式');
						test();
					}
					
				}
		
		9：事件机制和常见事件
		
			web技术发展至今，BS、CS模式发展。js事件机制：
			
			按钮点击的事件   onclick   双击事件  ondblclick
			
			鼠标的移动事件：  onmouseover
			
			键盘的点击弹起事件   ：onkeyup  onkeydown onkeypress//系统还未接收
			
			焦点获取以及失去事件： onfocusout onfocus onchange
			
			页面的事件：onload  等待全局页面加载完成之后才会执行   jQuery
		
		10：事件对象  事件冒泡和事件捕获
		
			事件冒泡事件捕捉：
			
			先解释一下什么叫做冒泡： 看过水的冒泡吧，见名知意
			
			所以在布局中，当界面被覆盖并且添加事件
			
			one.addEventListener('click',function(event){
		
			alert('wedfrend');
			
			//获取事件
			var eve = window.event || event;
			//终止冒泡
			eve.cancelBubble = true;//针对IE
			//其他的浏览器
			eve.stopPropagation();
		
			},useCapture);
		
		
		11：全局对象属性和函数 
		
			JS的全局对象

			全局对象的属性：
			
			Infinity:代表正的无穷大的值
			java:代表java.*包层级的一个javaPackage
			NaN:指示某个值是不是数字值
			Packages:根javaPackage对象
			undefined:指示未定义的值（属于全局对象的一个属性）
			
			不需要声明，你变可以直接拿过来使用。
			
			看看实例吧
			
			全局对象对象的函数：
			
			decodeURI():
			decodeURIComponent():
			encodeURI():
			encodeURIComponent():
			escape():
			unescape():
			
			isFinite():
			isNaN():
			
			
			Number():
			parseFloat(value):
			parseInt():
			String():
			eval("(var a = "****")"):
			
		
		
		12：String Date Math
		
		
			之前在jsp中有9大内置对象
			在js中自然也有，所谓全局对象，简单讲：就是你不需要做任何东西，就可以直接拿来用的
			
			js中的对象：
			
			Array
			Boolean
			Date
			
				date对象中的方法很多
			
			Math
			
				属性：PI E
				
				方法（也可以称之为函数）：    abs():幂等
									 round():四舍五入
									 floor():向下取整
									 ceil():向上取整
									 pow(**,**)
									 sqrt(*);
									 random():获取随机数[0,1)
			Number
			String
			RegExp
			Functions
			Events
		
		
		13:面向对象编程以及变量的三种状态
		
		<script type="text/javascript">
	
				function testObject() {
	
					var o = new Object();
	
					o.name = 'wangxiaobo ';
	
					delete o.name;
	
					alert(o.name);
	
				}
				
				/**
				 * 私有变量
				 */
				
				function testPrivate(){
					
					// 私有变量
					var name = 'wedfrend';
					
					var run = function (){
						alert(name);
					}
					
					//公有方法
					
					this.all = function(){
						run();
					}
					
				}
				
				
				/**
				 * 静态变量
				 */
				
				function testStatic(){
				}
				testStatic.name = 'wedfrend wang';
				testStatic.run = function (){
					console.log(name);
				}
				
				
				/**
				 * 共有，需要实例化进行调用的方式
				 */
				
				function testImpl(){
					
					this.name = 'wangxiaobo';
					this.run = function (){
						console.log(name);
					};
					
				}
				
				var impl = new testImpl();
				
				console.log(impl.name);
				
				
				var privates = new testPrivate();
				privates.all();
				//console.log(privates.all());
	
			</script>
		
		
		14：创建对象的5中方式
		
			1：创建工厂模式:创建函数，声明对象，并设置属性的对象值
				/**
				 * 创建工厂模式
				 * @param {String} name
				 * @param {Number} age
				 */
				function createFactory(name,age){
					//创建object对象
					var o = new Object();
					//设置属性
					o.name = name;
					o.age = age;
					o.learn = function (){
						//做事情;
						console.log(o.name + o.age);
					}
					//返回对象
					return o;
				}
		
			2:构造函数方式：简单讲就是构建一个类方法，含有公有变量还有公有方法
			
			/**
			 * 构造函数方式
			 
			 * @param {Object} name
			 * @param {Object} age
			 * 
			 * */
			function Student(names,ages){
				//这里面的参数表示公有变量
				this.age = ages;
				this.name = names;
				this.learn = function(){
					alert(this.name+this.age);
				}
			}
			
			
			3:原型模式
			
			/**
			 * 每一个函数都有一个名为   prototype 的属性
			 * 
			 * 是一个指针，包含所有共有的属性
			 */
			function Teacher(){}
			Teacher.prototype.name = '王晓波';
			Teacher.prototype.age = 33;
			Teacher.prototype.hobby = ['book','write'];
			
			4：混合模式，面向对象编程
			
			/**
			 * 混合模式
			 * @param {Object} name
			 * @param {Object} age
			 * @param {Object} sex
			 */
			function Person(name,age,sex){
				
				this.name = name;
				this.age = age;
				this.sex = sex;
				
			};
			Person.prototype.say = function(){
				console.log(this.name+"say hello");
			};
			
			
		5: 动态模式
			/**
			 * 
			 * @param {Object} name
			 */
			function Dog(name){
				this.name = name;
				
			};
			//进行判定，防止重复
			if(typeof Dog._run == 'undefined'){
				
				Dog.prototype.run = function(){
					alert(this.name +'dogdogdog');
				}
				//判定过后，别人就不再进行设置
				Dog._run = true;
				
			}
			
		
		15：原型的继承,使用的是prototype属性来完成继承
		
		
			function Person(){
				this.eyes = 'blank';
			}
			Person.prototype.speak = function(name){
				alert(name + '我说的是中国话');
			};
			
			function Me(name,age){
				this.name = name;
				this.age = age;
				
			};
			//先继承，在实现自己的原型
			Me.prototype = Person.prototype;
			Me.prototype.high = function(){
				console.log('我的身高1.7m');
			};
//			Me.prototype.speak = function(){
//				console.log('我');
//			};
			
			function jsExtends(){
				var me = new Me('wedfrend',29);
				me.high();
				me.speak(me.name);
			}
		
		
		16：json对象  eval函数
		
		JSON:www.json.org
		
		//js直接使用方式
		var obj2 = {
			//放置json规定的格式值
			"name":'wedfrend',
			'age':22,
			'address':'厦门市思明区软件园',
			run: function(){
				console.log('我正在运行着');
			}
		};
		console.log(obj2.name+'------------'+obj2.age+'--------'+obj2.address);
		obj2.run();
		
		//与后台数据通讯方式
		
		/*
		 * 那么对于json的数据，最多的是由后台返回的字符串，那么必须是后台返回前端认识的字符串，json
		 */
		
		var jsonString = '{"name":"wangxiaobo","age":25}';
		
		var jsonString2 = "{'pagelist':[{'name':'wedfrend','age':'25'},{'name':'wedfrend2','age':'24'}],'code':1,'message':'请求成功'}";
		
		var jsonString3 = {
			"name":"wangxiaobo",
			"age":25};
		//字符串,在js中解析的时候使用eval函数
		
		/**
		 * 下面的两个方法任何浏览器均兼容
		 */
		
		//方法1：
		
		eval("var jstr = "+jsonString);
		
		console.log(jstr.name);
		
		//方法2：
		var jstr2 = eval("("+jsonString2+")");
		
		console.log(jstr2.code+"----"+jstr2.message);
		
		for(var array in jstr2.pagelist){
			console.log(jstr2.pagelist[array].name+"----"+jstr2.pagelist[array].age);
		}
		
		//这里说两个方式
		
		var jp = JSON.parse(jsonString);
		console.log("jp:"+jp.name+'----'+jp.age);
		console.log("jp:"+JSON.stringify(jsonString3));
		
	BOM
	
	
		与浏览器密切相关，获取浏览器的基本信息
		
		操作BOM对象，主要的是熟悉掌握几个方法
		
		1：浏览器对象和屏幕分辨率
		
		window 对象，浏览器内置对象
		
		window.screen 可以获取到屏幕的宽高  
		
		function testScreen() {

		//窗口宽高
		console.log(window.screen.width + "-------" + window.screen.height);
		//可用宽高
		console.log(window.screen.availWidth + "-------" + window.screen.availHeight);

		}
		
		2：浏览器对象地址栏
		
		window.location 对象可以获取到的
		//http://127.0.0.1:8020/jsLearn/xxxxx.html
		console.log("当前页面的地址-------" + window.location.href);
		//http
		console.log("当前页面的地址protocol-------" + window.location.protocol);
		//127.0.0.1
		console.log("当前页面的地址hostname-------" + window.location.hostname);
		//8020
		console.log("当前页面的地址port-------" + window.location.port);
		//jsLearn/xxxxx.html
		console.log("当前页面的地址pathname-------" + window.location.pathname);
		//重新加载当前界面，相当于刷新
		window.location.reload();
		//加载指定的界面
		window.location.assign("http://www.baidu.com");
		
		3：浏览器访问历史
		
		//加载下一个界面
		window.location.forward();
		//回退
		window.location.forward();
		//跳转到
		window.location.go(0); //需要一个参数，跳转到哪一个界面
		
		4：浏览器信息，提示框
		
		window.navigator来获取到浏览器的信息
		
			console.log("window.navigator.appCodeName-----------" + window.navigator.appCodeName);
			console.log("window.navigator.appName-----------" + window.navigator.appName);
			console.log("window.navigator.appVersion-----------" + window.navigator.appVersion);
			console.log("window.navigator.cookieEnabled-----------" + window.navigator.cookieEnabled);
			console.log("window.navigator.platform-----------" + window.navigator.platform);
			console.log("window.navigator.userAgent-----------" + window.navigator.userAgent);
		
			chrome
		    screen.html:80 window.navigator.appCodeName--------Mozilla
			screen.html:81 window.navigator.appName---------Netscape
			screen.html:82 window.navigator.appVersion---------5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.221 Safari/537.36 SE 2.X MetaSr 1.0
			screen.html:83 window.navigator.cookieEnabled------true
			screen.html:84 window.navigator.platform-----------Win32
			screen.html:85 window.navigator.userAgent----------Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.221 Safari/537.36 SE 2.X MetaSr 1.0
		 
		 	//很久以前判断浏览器的方法
			if(window.navigator.userAgent.toUpperCase().indexOf("CHROME") == -1) {
			//表示不是谷歌浏览器
			//1:提示
			alert('为了更好的用户体验，请使用Chrom浏览器');
			//2:或者
			window.location.href = "array.html";

		}
		
		
		/**
		 * Browser的三种弹出框的设置
		 */
		function testWarnDialog() {

			alert('错误的输入方法'); //属于阻断行的操作

		};

		function testConfirmDialog() {
			var flag = window.confirm('您确认进行删除?'); //进行询问的时候，当用户点击相应操作，返回boolean的值，来执行相应的操作

			console.log(flag);

			if(flag) { //true：点击确定

			} else { //false:表示取消

			}
		};

		function testHintDialog() {
			
			var a = window.prompt('来者何人，报上名来！！！','我乃王晓波1');
			
			console.log(a);
			
			//返回值是一个String
			
			//点击确定   ------------》返回输入的信息
			
			//点击取消 -------------》那么现在显示的    null

		};
		
		
		5：浏览器打开或关闭窗口
		
		function openChild(){
		
		window.open('childWeb.html','child','width=400,height=400,left=300,top=100,toolbar=no,menubar=no,resizable=no,scrollbars=no,location=no,status=no')
		
		}
		
		function sayHello(){
			alert('i am say hello!!!');
		}
		
		//在子窗口调用父窗口的方法
		
		关闭子串口
		function closeChild() {

			window.close();
		}
		
		//调用父类的方法
		
		function getParentMethod(){
			window.opener.sayHello();
		}
		
		
		6：浏览器的定时执行
		
		window.setTimeout(func,time);
		
		function setTimeouts(){
		var aaa = document.getElementById("imgs");
		timeOutId = window.setTimeout(img(aaa),2000);
		}
		
		如何关闭呢？
		
		在执行定时操作的时候，我们调用方法之后都会生成一个ID并且返回
		
		在关闭的时候调用
		
		window.clearTimeout(timeOutId);
		
		重复执行：
		
		var aaa = document.getElementById("imgs");
		var i =1;
		
		 intervalId = window.setInterval(
			function (){
				
				console.log(Math.random());
				console.log(i);
				aaa.src = "img/"+i+".jpg";
				i= i+1;
				if(i == 6){
					i = 1;
				}
		},2000);
		
		};
		
		同理，使用关闭：
		
		window.clearInterval(intervalId);
		
		7:事件对象
		
		<head>
			<meta charset="UTF-8">
			<title></title>
			
			<script type="text/javascript">
				
				/*
				 * 兼容：各大浏览器厂商的产品自然有它的差异化，物竞天择，适者生存
				 * 
				 * 其实有时候感觉大多数的功能应用都差不多，为什么还会有这么多的雷同作品，没办法
				 * 
				 * 跟卖东西一样，都有着自己的市场。
				 * 
				 * */
				
				function mouseEvent(event){//这里传递一个参数，因为有不同浏览器的差异，firefox
					
					var eve = window.event||event;
					
					
					//在firefox中还是存在适配的问题
					
					var x = eve.x || eve.pageX;
					
					var y = eve.y || eve.pageY;
					
					console.log("坐标点的x="+x+"，y="+y);
					
	//				alert(eve);
					
				}
				
				
				function onKeyMove(event){
					
					//键盘的移动事件的操作
					
					var onkey = window.event || event;
					
					var code = onkey.charCode || onkey.keyCode;
					
					console.log(code);
					
					
				}
					
				</script>
				
			</head>
			<body>
				<h1>事件对象</h1>
				<div id="box" style="width: 500px; height: 300px; border: 1px solid;" onmousemove="mouseEvent(event);"></div>
				
				<input type="text" name="" id="" value="" placeholder="输入用户名" onkeyup="onKeyMove(event);"/>
				
			</body>
		
		
	DOM
	
		文档对象模式
		
				---获取节点
				---间接获取节点
				---操作节点属性的两种方式
				---操作元素的样式
				---操作元素的文本
				---改变层次结构
				/*
					 说说浏览器是如何获取节点的
					 
					 
					 ECMAJavaScript
					 
					 BOM
					 
					 DOM  :  那么在js中如何获取节点呢
					 
					 
					 		直接获取：
					 		
					 		通过ID
					 		
					 		通过标签
					 		
					 		通过class
					 		
					 		间接获取：
					 		
					 		通过div的样式设计获取
					 		
					 		querySelector、querySelectorAll
					 
					 
					 * */
					
					
					
					/**
					 * 
					 * 操作节点的属性方法有两种
					 * 
					 * 
					 * 节点.attribute   eg: name.value
					 * 
					 * 
					 * 节点.setAttribute("key","value");
					 * 节点.getAttribute("key");
					 * 
					 * 那么两种的区别在于：
					 * 
					 * 你说：区别在于什么地方呢?
					 * 
					 * 
					 * 节点.属性的方法不能 获取到新增属性
					 * 
					 * 而
					 * 
					 * 节点.getAttribute("key")方法只能获取到defaultValue
					 * 
					 * 
					 * 
					 */
					
					
					/*
					 * 如何通过js操作css样式
					 * 
					 * 
					 * 这里需要注意一下css和js的语法的差异：
					 * 
					 * 对于有 - 的这种属性
					 * 
					 * 如 background-color是不能在js中直接进行设置和使用的
					 * 
					 * 所以，css和js商量了一下，如果出现这种情况 
					 * 
					 * 那么使用  backgroundColor
					 * 
					 * 或者使用[background-color]
					 * 
					 * 
					 * 操作文本的话使用属性  innerHTML
					 * 
					 * innerText
					 * 
					 * 
					 * */
			
				
				---操作表单
				---操作列表  select
				---操作单选  oncheck
				---操作多选  
	


